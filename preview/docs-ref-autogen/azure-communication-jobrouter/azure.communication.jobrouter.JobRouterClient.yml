### YamlMime:PythonClass
uid: azure.communication.jobrouter.JobRouterClient
name: JobRouterClient
fullName: azure.communication.jobrouter.JobRouterClient
module: azure.communication.jobrouter
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService JobRouter service.


  This client provides operations to create and update jobs, policies and workers.'
constructor:
  syntax: 'JobRouterClient(endpoint: str, credential: AzureKeyCredential, **kwargs:
    Any)'
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate
    isRequired: true
    types:
    - <xref:azure.core.credentials.AzureKeyCredential>
  - name: api_version
    description: 'Azure Communication Job Router API version.

      Default value is "2022-07-18-preview".

      Note that overriding this default value may result in unsupported behavior.'
methods:
- uid: azure.communication.jobrouter.JobRouterClient.accept_job_offer
  name: accept_job_offer
  summary: 'Accepts an offer to work on a job and returns a 409/Conflict if another
    agent accepted the job

    already.'
  signature: 'accept_job_offer(worker_id: str, offer_id: str, **kwargs: Any) -> AcceptJobOfferResult'
  parameters:
  - name: worker_id
    description: Id of the worker.
    isRequired: true
    types:
    - <xref:str>
  - name: offer_id
    description: Id of the offer.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: AcceptJobOfferResult
    types:
    - <xref:azure.communication.jobrouter.AcceptJobOfferResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to accept a job offer<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       RouterJob,\n       AcceptJobOfferResult\n   )\n\n   accept_job_offer_result:\
    \ AcceptJobOfferResult = router_client.accept_job_offer(\n       worker_id = worker_id,\n\
    \       offer_id = offer_id\n   )\n\n   queried_job: RouterJob = router_client.get_job(job_id\
    \ = job_id)\n\n   print(f\"Job has been successfully assigned to worker. Current\
    \ job status: {queried_job.status}\")\n   print(f\"Job has been successfully assigned\
    \ with a worker with assignment \"\n         f\"id: {accept_job_offer_result.assignment_id}\"\
    )\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.cancel_job
  name: cancel_job
  summary: Submits request to cancel an existing job by Id while supplying free-form
    cancellation reason.
  signature: 'cancel_job(job_id: str, **kwargs: Any) -> CancelJobResult'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: note
    description: 'A note that will be appended to the jobs'' Notes collection with
      the

      current timestamp. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: disposition_code
    description: 'Indicates the outcome of the job, populate this field with your
      own

      custom values.

      If not provided, default value of "Cancelled" is set. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  return:
    description: CancelJobResult
    types:
    - <xref:azure.communication.jobrouter.CancelJobResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to cancel a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   router_client.delete_job(job_id = job_id)\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.close
  name: close
  signature: close() -> None
- uid: azure.communication.jobrouter.JobRouterClient.close_job
  name: close_job
  summary: Closes a completed job.
  signature: 'close_job(job_id: str, assignment_id: str, **kwargs: Any) -> CloseJobResult'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: The assignment within which the job is to be closed.
    isRequired: true
    types:
    - <xref:str>
  - name: disposition_code
    description: 'Indicates the outcome of the job, populate this field with your
      own

      custom values. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: close_time
    description: 'If not provided, worker capacity is released immediately along with
      a

      JobClosedEvent notification. If provided, worker capacity is released along
      with a JobClosedEvent notification

      at a future time. Default value is None.'
    types:
    - <xref:Optional>[<xref:datetime.datetime>]
  - name: note
    description: '(Optional) A note that will be appended to the jobs'' Notes collection
      with the

      current timestamp. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  return:
    description: CloseJobResult
    types:
    - <xref:azure.communication.jobrouter.CloseJobResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to close a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   close_job_result: CloseJobResult = router_client.close_job(\n\
    \       job_id = job_id,\n       assignment_id = assignment_id\n   )\n\n   queried_job:\
    \ RouterJob = router_client.get_job(job_id = job_id)\n\n   print(f\"Job has been\
    \ successfully closed. Current status: {queried_job.status}\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.complete_job
  name: complete_job
  summary: Completes an assigned job.
  signature: 'complete_job(job_id: str, assignment_id: str, **kwargs: Any) -> CompleteJobResult'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: The assignment within the job to complete.
    isRequired: true
    types:
    - <xref:str>
  - name: note
    description: '(Optional) A note that will be appended to the jobs'' Notes collection
      with th

      current timestamp. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  return:
    description: CompleteJobResult
    types:
    - <xref:azure.communication.jobrouter.CompleteJobResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to complete a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       JobRouterClient,\n       RouterJob,\n       CompleteJobResult,\n     \
    \  CloseJobResult\n   )\n\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n\n   queried_job: RouterJob = router_client.get_job(job_id\
    \ = job_id)\n\n   assignment_id = [k for k, v in queried_job.assignments.items()][0]\n\
    \n   complete_job_result: CompleteJobResult = router_client.complete_job(\n  \
    \     job_id = job_id,\n       assignment_id = assignment_id\n   )\n\n   queried_job:\
    \ RouterJob = router_client.get_job(job_id = job_id)\n\n   print(f\"Job has been\
    \ successfully completed. Current status: {queried_job.status}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.create_job
  name: create_job
  summary: Create a job.
  signature: 'create_job(job_id: str, router_job: RouterJob, **kwargs: Any) -> RouterJob'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: router_job
    description: An instance of RouterJob.
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.RouterJob>
  return:
    description: RouterJob
    types:
    - <xref:azure.communication.jobrouter.RouterJob>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to create a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from datetime import datetime, timedelta\n  \
    \ from azure.communication.jobrouter import (\n       JobRouterClient,\n     \
    \  RouterJob\n   )\n\n   # set `connection_string` to an existing ACS endpoint\n\
    \   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \   print(\"JobRouterAdministrationClient created successfully!\")\n\n   # We\
    \ need to create a distribution policy + queue as a pre-requisite to start creating\
    \ job\n   router_job = router_client.create_job(\n       job_id = job_id,\n  \
    \     router_job = RouterJob(\n           channel_id = \"general\",\n        \
    \   queue_id = queue_id,\n           priority = 10,\n           channel_reference\
    \ = \"12345\"\n       )\n   )\n\n   print(f\"Job has been successfully created\
    \ with status: {router_job.status}\")\n\n   # Alternatively, a job can also be\
    \ created while specifying a classification policy\n   # As a pre-requisite, we\
    \ would need to create a classification policy first\n   router_job_with_cp =\
    \ router_client.create_job(\n       job_id = job_w_cp_id,\n       router_job =\
    \ RouterJob(\n           channel_id = \"general\",\n           classification_policy_id\
    \ = classification_policy_id,\n           channel_reference = \"12345\"\n    \
    \   )\n   )\n   print(f\"Job has been successfully created with status: {router_job_with_cp.status}\"\
    )\n\n   # Additionally, any job can be created as a scheduled job\n   # by simply\
    \ specifying a scheduled_time_utc and setting unavailable_for_matching to true\n\
    \   router_scheduled_job = router_client.create_job(\n       job_id = scheduled_job_id,\n\
    \       router_job = RouterJob(\n           channel_id = \"general\",\n      \
    \     queue_id = queue_id,\n           priority = 10,\n           channel_reference\
    \ = \"12345\",\n           scheduled_time_utc = datetime.utcnow() + timedelta(0,\
    \ 30),  # scheduled after 30 secs\n           unavailable_for_matching = True\n\
    \       )\n   )\n   print(f\"Scheduled job has been successfully created with\
    \ status: {router_scheduled_job.status}\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.create_worker
  name: create_worker
  summary: Create a new worker.
  signature: 'create_worker(worker_id: str, router_worker: RouterWorker, **kwargs:
    Any) -> RouterWorker'
  parameters:
  - name: worker_id
    description: Id of the worker.
    isRequired: true
    types:
    - <xref:str>
  - name: router_worker
    description: 'An instance of RouterWorker. This is a positional-only parameter.

      Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.RouterWorker>
  return:
    description: RouterWorker
    types:
    - <xref:azure.communication.jobrouter.RouterWorker>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to create a worker<!--[!code-python[Main](les\\router_worker_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       JobRouterClient,\n       RouterWorker,\n       QueueAssignment,\n    \
    \   ChannelConfiguration,\n   )\n\n   # set `connection_string` to an existing\
    \ ACS endpoint\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n   print(\"JobRouterClient created successfully!\")\n\n\
    \   router_worker: RouterWorker = router_client.create_worker(\n       worker_id\
    \ = worker_id,\n       router_worker = RouterWorker(\n           total_capacity\
    \ = 100,\n           queue_assignments = {\n               \"worker-q-1\": QueueAssignment(),\n\
    \               \"worker-q-2\": QueueAssignment()\n           },\n           channel_configurations\
    \ = {\n               \"WebChat\": ChannelConfiguration(capacity_cost_per_job\
    \ = 1),\n               \"WebChatEscalated\": ChannelConfiguration(capacity_cost_per_job\
    \ = 20),\n               \"Voip\": ChannelConfiguration(capacity_cost_per_job\
    \ = 100)\n           },\n           labels = {\n               \"Location\": \"\
    NA\",\n               \"English\": 7,\n               \"O365\": True,\n      \
    \         \"Xbox_Support\": False\n           },\n           tags = {\n      \
    \         \"Name\": \"John Doe\",\n               \"Department\": \"IT_HelpDesk\"\
    \n           }\n       )\n   )\n\n   print(f\"Router worker successfully created\
    \ with id: {router_worker.id}\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.decline_job_offer
  name: decline_job_offer
  summary: 'Declines an offer to work on a job.


    worker who declined this job unless the worker is de-registered and re-registered.  If
    a reoffer time is

    provided, then the job will be re-matched to eligible workers after the reoffer
    time.  The worker that declined

    the job will also be eligible for the job at that time.

    :paramtype reoffer_time_utc: Optional[Union[str, ~datetime.datetime]]'
  signature: 'decline_job_offer(worker_id: str, offer_id: str, **kwargs: Any) -> DeclineJobOfferResult'
  return:
    description: DeclineJobOfferResult
    types:
    - <xref:azure.communication.jobrouter.DeclineJobOfferResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to decline a job offer<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n       decline_job_offer_result = router_client.decline_job_offer(\n\
    \           worker_id = worker_id,\n           offer_id = offer_id,\n        \
    \   reoffer_time_utc = datetime.utcnow() + timedelta(0, 30)  # re-offer after\
    \ 30 secs\n       )\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.delete_job
  name: delete_job
  summary: Delete a job by Id.
  signature: 'delete_job(job_id: str, **kwargs: Any) -> None'
  parameters:
  - name: job_id
    description: Id of the job to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to delete a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   router_client.delete_job(job_id = job_id)\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.delete_worker
  name: delete_worker
  summary: Delete a worker by Id.
  signature: 'delete_worker(worker_id: str, **kwargs: Any) -> None'
  parameters:
  - name: worker_id
    description: Id of the worker to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to delete an existing worker<!--[!code-python[Main](les\\\
    router_worker_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ JobRouterClient\n\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n\n   router_client.delete_worker(worker_id = worker_id)\n\
    \n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.from_connection_string
  name: from_connection_string
  summary: Create JobRouterClient from a Connection String.
  signature: 'from_connection_string(conn_str: str, **kwargs: Any) -> JobRouterClient'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: Instance of JobRouterClient.
    types:
    - <xref:azure.communication.jobrouter.JobRouterClient>
  examples:
  - "Authenticating a JobRouterClient from a connection_string<!--[!code-python[Main](les\\\
    sample_authentication.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\sample_authentication.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ JobRouterClient\n\n   # set `connection_string` to an existing ACS endpoint\n\
    \   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \   print(\"JobRouterClient created successfully!\")\n\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.get_job
  name: get_job
  summary: Retrieves an existing worker by Id.
  signature: 'get_job(job_id: str, **kwargs: Any) -> RouterJob'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: RouterJob
    types:
    - <xref:azure.communication.jobrouter.RouterJob>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to get a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   router_job = router_client.get_job(job_id = job_id)\n\n   print(f\"Successfully\
    \ fetched router worker with id: {router_job.id}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.get_queue_position
  name: get_queue_position
  summary: Gets a job's position details.
  signature: 'get_queue_position(job_id: str, **kwargs: Any) -> RouterJobPositionDetails'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: JobPositionDetails
    types:
    - <xref:azure.communication.jobrouter.RouterJobPositionDetails>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to get a job position in queue<!--[!code-python[Main](les\\\
    router_job_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ JobRouterClient\n\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n\n   router_job_position = router_client.get_queue_position(job_id\
    \ = job_id)\n\n   print(f\"Successfully fetched router job position: {router_job_position.position}\"\
    )\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.get_queue_statistics
  name: get_queue_statistics
  summary: Retrieves a queue's statistics.
  signature: 'get_queue_statistics(queue_id: str, **kwargs: Any) -> RouterQueueStatistics'
  parameters:
  - name: queue_id
    description: Id of the queue.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: QueueStatistics
    types:
    - <xref:azure.communication.jobrouter.RouterQueueStatistics>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to fetch queue statistics<!--[!code-python[Main](les\\\
    job_queue_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    _work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\job_queue_crud_ops.py\", \"xml:space\": \"preserve\", \"force\":\
    \ false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ (\n       JobRouterClient,\n       RouterQueueStatistics\n   )\n\n   router_client:\
    \ JobRouterClient = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   job_queue_statistics: RouterQueueStatistics = router_client.get_queue_statistics(queue_id\
    \ = job_queue_id)\n\n   print(f\"Successfully fetched queue statistics router\
    \ queue: {job_queue_statistics}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.get_worker
  name: get_worker
  summary: Retrieves an existing worker by Id.
  signature: 'get_worker(worker_id: str, **kwargs: Any) -> RouterWorker'
  parameters:
  - name: worker_id
    description: Id of the worker.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: RouterWorker
    types:
    - <xref:azure.communication.jobrouter.RouterWorker>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to get a worker<!--[!code-python[Main](les\\router_worker_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   router_worker = router_client.get_worker(worker_id = worker_id)\n\n   print(f\"\
    Successfully fetched router worker with id: {router_worker.id}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.list_jobs
  name: list_jobs
  summary: Retrieves list of jobs based on filter parameters.
  signature: 'list_jobs(*, status: str | RouterJobStatusSelector | None = RouterJobStatusSelector.ALL,
    channel_id: str | None = None, queue_id: str | None = None, classification_policy_id:
    str | None = None, scheduled_before: str | datetime | None = None, scheduled_after:
    str | datetime | None = None, results_per_page: int | None = None, **kwargs: Any)
    -> ItemPaged[RouterJobItem]'
  parameters:
  - name: status
    description: 'If specified, filter jobs by status. Default value is "all".

      Accepted value(s): pendingClassification, queued, assigned, completed, closed,
      cancelled,

      classificationFailed, active, all'
    types:
    - <xref:Optional>[<xref:Union>[<xref:str>, <xref:azure.communication.jobrouter.RouterJobStatusSelector>]]
  - name: channel_id
    description: If specified, filter jobs by channel. Default value is None.
    types:
    - <xref:Optional>[<xref:str>]
  - name: queue_id
    description: If specified, filter jobs by queue. Default value is None.
    types:
    - <xref:Optional>[<xref:str>]
  - name: classification_policy_id
    description: If specified, filter jobs by classificationPolicy. Default value
      is None.
    types:
    - <xref:Optional>[<xref:str>]
  - name: scheduled_before
    description: 'If specified, filter on jobs that was scheduled before or

      at given timestamp. Range: (-Inf, scheduledBefore]. Default value is None.'
    types:
    - <xref:Optional>[<xref:Union>[<xref:str>, <xref:datetime.datetime>]]
  - name: scheduled_after
    description: 'If specified, filter on jobs that was scheduled at or

      after given value. Range: [scheduledAfter, +Inf). Default value is None.'
    types:
    - <xref:Optional>[<xref:Union>[<xref:str>, <xref:datetime.datetime>]]
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:Optional>[<xref:int>]
  return:
    description: An iterator like instance of RouterJobItem
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.jobrouter.RouterJobItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to retrieve scheduled jobs<!--[!code-python[Main](les\\\
    router_job_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\":\
    \ [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from datetime import datetime\n   from\
    \ azure.communication.jobrouter import JobRouterClient\n\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n\n   scheduled_before = datetime.utcnow()\n\n   router_job_iterator\
    \ = router_client.list_jobs(scheduled_before = scheduled_before, results_per_page\
    \ = 10)\n\n   for job_page in router_job_iterator.by_page():\n       jobs_in_page\
    \ = list(job_page)\n       print(f\"Retrieved {len(jobs_in_page)} jobs in current\
    \ page\")\n\n       for j in jobs_in_page:\n           print(f\"Retrieved job\
    \ with id: {j.job.id}\")\n\n   print(f\"Successfully completed fetching scheduled\
    \ jobs\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.list_workers
  name: list_workers
  summary: Retrieves existing workers.
  signature: 'list_workers(*, state: str | RouterWorkerStateSelector | None = RouterWorkerStateSelector.ALL,
    channel_id: str | None = None, queue_id: str | None = None, has_capacity: bool
    | None = None, results_per_page: int | None = None, **kwargs: Any) -> ItemPaged[RouterWorkerItem]'
  parameters:
  - name: state
    description: 'If specified, select workers by worker status. Default value is
      "all".

      Accepted value(s): active, draining, inactive, all'
    types:
    - <xref:Optional>[<xref:Union>[<xref:str>, <xref:azure.communication.jobrouter.RouterWorkerStateSelector>]]
  - name: channel_id
    description: 'If specified, select workers who have a channel configuration

      with this channel. Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: queue_id
    description: 'If specified, select workers who are assigned to this queue.

      Default value is None.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: has_capacity
    description: 'If set to true, select only workers who have capacity for the

      channel specified by `channelId` or for any channel'
    types:
    - <xref:Optional>[<xref:bool>]
  - name: results_per_page
    description: The maximum number of results to be returned per page.
    types:
    - <xref:Optional>[<xref:int>]
  return:
    description: An iterator like instance of RouterWorkerItem
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.jobrouter.RouterWorkerItem>]
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to retrieve workers in batches<!--[!code-python[Main](les\\\
    router_worker_crud_ops.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\"\
    : [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\\
    a\\\\_work\\\\1\\\\s\\\\dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\
    \\samples\\\\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\"\
    : false, \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"\
    linenos\": false} -->\n\n````python\n\n   from azure.communication.jobrouter import\
    \ JobRouterClient\n\n   router_client = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n\n   router_worker_iterator = router_client.list_workers(results_per_page\
    \ = 10)\n\n   for worker_page in router_worker_iterator.by_page():\n       workers_in_page\
    \ = list(worker_page)\n       print(f\"Retrieved {len(workers_in_page)} workers\
    \ in current page\")\n\n       for w in workers_in_page:\n           print(f\"\
    Retrieved worker with id: {w.router_worker.id}\")\n\n   print(f\"Successfully\
    \ completed fetching workers\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.reclassify_job
  name: reclassify_job
  summary: Reclassify a job.
  signature: 'reclassify_job(job_id: str, **kwargs: Any) -> ReclassifyJobResult'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ReclassifyJobResult
    types:
    - <xref:azure.communication.jobrouter.ReclassifyJobResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to re-classify a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   reclassify_job_result = router_client.reclassify_job(job_id = job_id)\n\n\
    \   print(f\"Successfully re-classified job\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.unassign_job
  name: unassign_job
  summary: Unassign a job.
  signature: 'unassign_job(job_id: str, assignment_id: str, **kwargs: Any) -> UnassignJobResult'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: assignment_id
    description: Id of the assignment.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: UnassignJobResult
    types:
    - <xref:azure.communication.jobrouter.UnassignJobResult>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to unassign a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   unassign_job_result = router_client.unassign_job(job_id = job_id, assignment_id\
    \ = assignment_id)\n\n   print(f\"Successfully unassigned job\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.update_job
  name: update_job
  summary: Update a job.
  signature: 'update_job(job_id: str, router_job: RouterJob, **kwargs: Any) -> RouterJob'
  parameters:
  - name: job_id
    description: Id of the job.
    isRequired: true
    types:
    - <xref:str>
  - name: router_job
    description: 'An instance of RouterJob.  This is a positional-only parameter.

      Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.RouterJob>
  - name: channel_reference
    description: Reference to an external parent context, eg. call ID.
    types:
    - <xref:Optional>[<xref:str>]
  - name: channel_id
    description: The channel identifier. eg. voice, chat, etc.
    types:
    - <xref:Optional>[<xref:str>]
  - name: classification_policy_id
    description: 'The Id of the Classification policy used for classifying a

      job.'
    types:
    - <xref:Optional>[<xref:str>]
  - name: queue_id
    description: The Id of the Queue that this job is queued to.
    types:
    - <xref:Optional>[<xref:str>]
  - name: priority
    description: The priority of this job.
    types:
    - <xref:Optional>[<xref:int>]
  - name: disposition_code
    description: Reason code for cancelled or closed jobs.
    types:
    - <xref:Optional>[<xref:str>]
  - name: requested_worker_selectors
    description: 'A collection of manually specified label selectors, which

      a worker must satisfy in order to process this job.'
    types:
    - <xref:Optional>[<xref:List>[<xref:azure.communication.jobrouter.WorkerSelector>]]
  - name: labels
    description: 'A set of key/value pairs that are identifying attributes used by
      the rules

      engines to make decisions.'
    types:
    - <xref:Optional>[<xref:Dict>[<xref:str>, <xref:Union>[<xref:int>, <xref:float>,
      <xref:str>, <xref:bool>]]]
  - name: tags
    description: A set of tags. A set of non-identifying attributes attached to this
      job.
    types:
    - <xref:Optional>[<xref:Dict>[<xref:str>, <xref:Union>[<xref:int>, <xref:float>,
      <xref:str>, <xref:bool>]]]
  - name: notes
    description: Notes attached to a job, sorted by timestamp.
    types:
    - <xref:Optional>[<xref:Dict>[<xref:datetime.datetime>, <xref:str>]]
  - name: matching_mode
    description: If set, determines how a job will be matched
    types:
    - <xref:Optional>[<xref:azure.communication.jobrouter.JobMatchingMode>]
  return:
    description: RouterJob
    types:
    - <xref:azure.communication.jobrouter.RouterJob>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to update a job<!--[!code-python[Main](les\\router_job_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_job_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false, \"\
    language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import (\n\
    \       JobRouterClient,\n       RouterWorker,\n       QueueAssignment,\n    \
    \   ChannelConfiguration,\n   )\n\n   # set `connection_string` to an existing\
    \ ACS endpoint\n   router_client: JobRouterClient = JobRouterClient.from_connection_string(conn_str\
    \ = connection_string)\n   print(\"JobRouterAdministrationClient created successfully!\"\
    )\n\n   update_job = router_client.update_job(\n       job_id = job_id,\n    \
    \   channel_reference = \"45678\"\n   )\n\n   print(f\"Job has been successfully\
    \ update with channel reference: {update_job.channel_reference}\")\n\n   ````\n"
- uid: azure.communication.jobrouter.JobRouterClient.update_worker
  name: update_worker
  summary: Update a router worker.
  signature: 'update_worker(worker_id: str, router_worker: RouterWorker, **kwargs:
    Any) -> RouterWorker'
  parameters:
  - name: worker_id
    description: Id of the worker.
    isRequired: true
    types:
    - <xref:str>
  - name: router_worker
    description: 'An instance of RouterWorker. This is a positional-only parameter.

      Please provide either this or individual keyword parameters.'
    isRequired: true
    types:
    - <xref:azure.communication.jobrouter.RouterWorker>
  - name: queue_assignments
    description: The queue(s) that this worker can receive work from.
    types:
    - <xref:Optional>[<xref:Dict>[<xref:str>, <xref:azure.communication.jobrouter.QueueAssignment>]]
  - name: total_capacity
    description: 'The total capacity score this worker has to manage multiple concurrent

      jobs.'
    types:
    - <xref:Optional>[<xref:int>]
  - name: labels
    description: 'A set of key/value pairs that are identifying attributes used by
      the rules

      engines to make decisions.'
    types:
    - <xref:Optional>[<xref:dict>[<xref:str>, <xref:Union>[<xref:int>, <xref:float>,
      <xref:str>, <xref:bool>]]]
  - name: tags
    description: A set of tags. A set of non-identifying attributes attached to this
      worker.
    types:
    - <xref:Optional>[<xref:dict>[<xref:str>, <xref:Union>[<xref:int>, <xref:float>,
      <xref:str>, <xref:bool>]]]
  - name: channel_configurations
    description: 'The channel(s) this worker can handle and their impact on the

      workers capacity.'
    types:
    - <xref:Optional>[<xref:Dict>[<xref:str>, <xref:azure.communication.jobrouter.ChannelConfiguration>]]
  - name: available_for_offers
    description: A flag indicating this worker is open to receive offers or not.
    types:
    - <xref:Optional>[<xref:bool>]
  return:
    description: RouterWorker
    types:
    - <xref:azure.communication.jobrouter.RouterWorker>
  exceptions:
  - type: <xref:azure.core.exceptions.HttpResponseError>, <xref:ValueError>
  examples:
  - "Use a JobRouterClient to de-register a worker<!--[!code-python[Main](les\\router_worker_crud_ops.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\_work\\\\1\\\\s\\\\\
    dist_temp\\\\284\\\\azure-communication-jobrouter-1.0.0a20230630002\\\\samples\\\
    \\router_worker_crud_ops.py\", \"xml:space\": \"preserve\", \"force\": false,\
    \ \"language\": \"python\", \"highlight_args\": {\"linenostart\": 1}, \"linenos\"\
    : false} -->\n\n````python\n\n   from azure.communication.jobrouter import JobRouterClient\n\
    \n   router_client = JobRouterClient.from_connection_string(conn_str = connection_string)\n\
    \n   router_worker = router_client.update_worker(\n       worker_id = worker_id,\n\
    \       available_for_offers = False\n   )\n\n   print(f\"Successfully de-registered\
    \ router worker with id: {router_worker.id} with status: {router_worker.state}\"\
    )\n\n   ````\n"
