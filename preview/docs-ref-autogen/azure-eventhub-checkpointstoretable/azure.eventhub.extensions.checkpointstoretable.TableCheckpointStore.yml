### YamlMime:PythonClass
uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore
name: TableCheckpointStore
fullName: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore
module: azure.eventhub.extensions.checkpointstoretable
inheritances:
- azure.eventhub._eventprocessor.checkpoint_store.CheckpointStore
summary: 'A CheckpointStore that uses Azure Table Storage to store the partition ownership
  and checkpoint data.


  This class implements methods list_ownership, claim_ownership, update_checkpoint
  and list_checkpoints.'
constructor:
  syntax: 'TableCheckpointStore(table_account_url: str, table_name: str, credential:
    Any | None = None, **kwargs: Any)'
  parameters:
  - name: table_account_url
    description: The URI to the storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The name of the table for the tables.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token. The value can be a SAS token string, an
      account

      shared access key, or an instance of a TokenCredentials class from azure.identity.

      If the URL already has a SAS token, specifying an explicit credential will take
      priority.'
    defaultValue: None
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2018-03-28'.
    types:
    - <xref:str>
methods:
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.claim_ownership
  name: claim_ownership
  summary: Tries to claim ownership for a list of specified partitions.
  signature: 'claim_ownership(ownership_list: Iterable[Dict[str, Any]], **kwargs:
    Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: ownership_list
    description: Iterable of dictionaries containing all the ownerships to claim.
    isRequired: true
    types:
    - <xref:Iterable>[<xref:Dict>[<xref:str,Any>]]
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str,Any>]], <xref:Iterable of dictionaries
      containing partition ownership information:- *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to.   The format is
      like "<namespace.servicebus.windows.net".* *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoint is associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the ownership are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *owner_id* >(<xref:str>)<xref:: A UUID representing the owner attempting to
      claim this partition. * *last_modified_time* >(<xref:float>)<xref:: The last
      time this ownership was claimed. * *etag* >(<xref:str>)<xref:: The Etag value
      for the last time this ownership was modified. Optional depending on storage
      implementation.>'
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.close
  name: close
  signature: close()
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.from_connection_string
  name: from_connection_string
  summary: Create TableCheckpointStore from a storage connection string.
  signature: 'from_connection_string(conn_str: str, table_name: str, credential: Any
    | None = None, **kwargs: Any) -> TableCheckpointStore'
  parameters:
  - name: conn_str
    description: A connection string to an Azure Storage account.
    isRequired: true
    types:
    - <xref:str>
  - name: table_name
    description: The table name.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. This is optional if
      the

      account URL already has a SAS token, or the connection string already has shared

      access key values. The value can be a SAS token string, an account shared access

      key, or an instance of a TokenCredentials class from azure.identity.

      Credentials provided here will take precedence over those in the connection
      string.'
    defaultValue: None
  - name: api_version
    description: The Storage API version to use for requests. Default value is '2018-03-28'.
    types:
    - <xref:str>
  return:
    description: A table checkpoint store.
    types:
    - <xref:azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore>
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.list_checkpoints
  name: list_checkpoints
  summary: List the updated checkpoints from the storage table.
  signature: 'list_checkpoints(fully_qualified_namespace: str, eventhub_name: str,
    consumer_group: str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the checkpoints are associated
      with, relative to

      the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the checkpoints are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str,Any>]], <xref:Iterable of dictionaries
      containing partition checkpoint information:- *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to.   The format is
      like "<namespace.servicebus.windows.net".* *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoints are associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the checkpoints are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *sequence_number* >(<xref:int>)<xref:: The sequence number of the azure.eventhub.EventData.
      * *offset* >(<xref:str>)<xref:: The offset of the azure.eventhub.EventData.>'
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.list_ownership
  name: list_ownership
  summary: Retrieves a complete ownership list from the storage table.
  signature: 'list_ownership(fully_qualified_namespace: str, eventhub_name: str, consumer_group:
    str, **kwargs: Any) -> Iterable[Dict[str, Any]]'
  parameters:
  - name: fully_qualified_namespace
    description: 'The fully qualified namespace that the Event Hub belongs to.

      The format is like "<namespace>.servicebus.windows.net".'
    isRequired: true
    types:
    - <xref:str>
  - name: eventhub_name
    description: 'The name of the specific Event Hub the partition ownerships are
      associated with,

      relative to the Event Hubs namespace that contains it.'
    isRequired: true
    types:
    - <xref:str>
  - name: consumer_group
    description: The name of the consumer group the ownerships are associated with.
    isRequired: true
    types:
    - <xref:str>
  return:
    types:
    - '<xref:Iterable>[<xref:Dict>[<xref:str>, <xref:Any>]], <xref:Iterable of dictionaries
      containing partition ownership information:- *fully_qualified_namespace* >(<xref:str>)<xref::
      The fully qualified namespace that the Event Hub belongs to.   The format is
      like "<namespace.servicebus.windows.net".* *eventhub_name* >(<xref:str>)<xref::
      The name of the specific Event Hub the checkpoint is associated with>, <xref:relative
      to the Event Hubs namespace that contains it. * *consumer_group* >(<xref:str>)<xref::
      The name of the consumer group the ownership are associated with. * *partition_id*
      >(<xref:str>)<xref:: The partition ID which the checkpoint is created for. *
      *owner_id* >(<xref:str>)<xref:: A UUID representing the current owner of this
      partition. * *last_modified_time* >(<xref:float>)<xref:: The last time this
      ownership was claimed. * *etag* >(<xref:str>)<xref:: The Etag value for the
      last time this ownership was modified. Optional depending on storage implementation.>'
- uid: azure.eventhub.extensions.checkpointstoretable.TableCheckpointStore.update_checkpoint
  name: update_checkpoint
  summary: "Updates the checkpoint using the given information for the offset, associated\
    \ partition and\nconsumer group in the storage table.\n\nNote: If you plan to\
    \ implement a custom checkpoint store with the intention of running between\n\
    cross-language EventHubs SDKs, it is recommended to persist the offset value as\
    \ an integer.\n:param Dict[str,Any] checkpoint: A dict containing checkpoint information:\n\
    \n   * *fully_qualified_namespace* (str): The fully qualified namespace that the\
    \ Event Hub belongs to. The format is like \"<namespace>.servicebus.windows.net\"\
    . \n\n   * *eventhub_name* (str): The name of the specific Event Hub the checkpoint\
    \ is associated with, relative to the Event Hubs namespace that contains it. \n\
    \n   * *consumer_group* (str): The name of the consumer group the checkpoint is\
    \ associated with. \n\n   * *partition_id* (str): The partition ID which the checkpoint\
    \ is created for. \n\n   * *sequence_number* (int): The sequence number of the\
    \ <xref:azure.eventhub.EventData> the new checkpoint will be associated with.\
    \ \n\n   * *offset* (str): The offset of the <xref:azure.eventhub.EventData> the\
    \ new checkpoint will be associated with."
  signature: 'update_checkpoint(checkpoint: Dict[str, str | int | None], **kwargs:
    Any) -> None'
  parameters:
  - name: checkpoint
    isRequired: true
  return:
    types:
    - <xref:None>
